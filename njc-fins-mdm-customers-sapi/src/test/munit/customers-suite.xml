<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="customers-suite.xml" />
	<munit:test name="customers_post-customers-test" doc:id="5a23dc95-5f01-4b20-b02d-d6e4a3a5182e" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Call Customers_Create" doc:id="89ec9df3-6f7e-417e-b309-774064a273d9" processor="db:stored-procedure">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Call Customers_Create" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://munittest/customerspostcustomerstest/mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://munittest/customerspostcustomerstest/mock_variable_.dwl')]" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="97a1904c-f5c1-4f6b-ad41-98d5e2c04bb8" >
				<munit:payload value="#[output application/json --- readUrl('classpath://munittest/customerspostcustomerstest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://munittest/customerspostcustomerstest/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://munittest/customerspostcustomerstest/set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to customers_post-customers" doc:id="2f8c90f5-9bd3-4afa-b3ed-7cee21d86a42" name="customers_post-customers"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="3dd23db6-1735-400c-af11-b5678728c840" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import munittest::customerspostcustomerstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="customers_patch-customer-test" doc:id="4c6a42f0-c490-4bb0-9df7-7d6a91161002" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Update Customer" doc:id="13e3ad7b-a6a2-4c82-b61b-35feebba7ae3" processor="db:update">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Update Customer" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://munittest/customerspatchcustomertest/mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock customers_get-customer" doc:id="7db36851-7e3d-4818-8619-244c5812e84d" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="customers_get-customer" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json --- readUrl('classpath://munittest/customerspatchcustomertest/mock_payload1.dwl')]" mediaType="application/json" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://munittest/customerspatchcustomertest/mock_variable_.dwl')]" />
						<munit-tools:variable key="customerId" value="#[output application/java --- readUrl('classpath://munittest/customerspatchcustomertest/mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="customerDBRecord" value="#[output application/json --- readUrl('classpath://munittest/customerspatchcustomertest/mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="c780d3ee-d773-41d4-9250-4e0987dbe072" >
				<munit:payload value="#[output application/json --- readUrl('classpath://munittest/customerspatchcustomertest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://munittest/customerspatchcustomertest/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://munittest/customerspatchcustomertest/set-event_variable_.dwl')]" />
					<munit:variable key="customerId" value="#[output application/java --- readUrl('classpath://munittest/customerspatchcustomertest/set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to customers_patch-customer" doc:id="314f4310-2154-4871-bf69-5900a9caa7f1" name="customers_patch-customer"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="82b8e4db-9679-4bb7-8ae5-f35b209b921a" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import munittest::customerspatchcustomertest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="customers_get-customer-test" doc:id="a51cd68e-3483-4cb3-9bb7-0dfe9522da78" ignore="true">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock individuals_get-individual" doc:id="350eec4d-d242-4c1c-8c25-18133cb83981" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="individuals_get-individual" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomertest/mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://munittest/customersgetcustomertest/mock_variable_.dwl')]" />
						<munit-tools:variable key="customerId" value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomertest/mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="individualRecord" value="#[output application/json --- readUrl('classpath://munittest/customersgetcustomertest/mock_variable_2.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="customerExternalIds" value="#[output application/json --- readUrl('classpath://munittest/customersgetcustomertest/mock_variable_3.dwl')]" mediaType="application/json" encoding="UTF-8" />
						<munit-tools:variable key="individualId" value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomertest/mock_variable_4.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Select Customer Party Role" doc:id="f2e638e6-49ca-4632-9ed0-88563623114d" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Select Customer Party Role" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomertest/mock_payload1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://munittest/customersgetcustomertest/mock_variable_5.dwl')]" />
						<munit-tools:variable key="customerId" value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomertest/mock_variable_6.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock partyroles_get-externalids" doc:id="55618bdf-13d8-429e-822e-41c346e9e675" processor="flow-ref">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="partyroles_get-externalids" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomertest/mock_payload2.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://munittest/customersgetcustomertest/mock_variable_7.dwl')]" />
						<munit-tools:variable key="customerId" value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomertest/mock_variable_8.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="customerExternalIds" value="#[output application/json --- readUrl('classpath://munittest/customersgetcustomertest/mock_variable_9.dwl')]" mediaType="application/json" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="1280e0ff-ca9d-4560-a5e6-edb90df8152c" >
				<munit:payload value="#[output application/json --- readUrl('classpath://munittest/customersgetcustomertest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://munittest/customersgetcustomertest/set-event_variable_.dwl')]" />
					<munit:variable key="customerId" value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomertest/set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to customers_get-customer" doc:id="2572dc49-c9be-47bd-a0ac-ee95b7481c52" name="customers_get-customer"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="b7624895-7b2b-431c-8f78-f1bc30a16b8e" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import munittest::customersgetcustomertest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>
	<munit:test name="customers_get-customers-search-test" doc:id="254e7649-8195-4ab3-803e-f1c1b59f9abf">
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select Parties on Input Params" doc:id="56ed7983-dc42-44a7-87b9-3ed8d372abd4" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Select Parties on Input Params" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomerssearchtest/mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://munittest/customersgetcustomerssearchtest/mock_variable_.dwl')]" />
						<munit-tools:variable key="rootMessage" value="#[readUrl('classpath://munittest/customersgetcustomerssearchtest/mock_variable_1.dwl')]" />
						<munit-tools:variable key="searchFlag" value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomerssearchtest/mock_variable_2.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="offset" value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomerssearchtest/mock_variable_3.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="customerId" value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomerssearchtest/mock_variable_4.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="limit" value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomerssearchtest/mock_variable_5.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="externalId" value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomerssearchtest/mock_variable_6.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="counter" value="#[readUrl('classpath://munittest/customersgetcustomerssearchtest/mock_variable_7.dwl')]" />
						<munit-tools:variable key="outputDBRecords" value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomerssearchtest/mock_variable_8.dwl')]" mediaType="application/java" encoding="UTF-8" />
						<munit-tools:variable key="emailAddress" value="#[output application/java --- readUrl('classpath://munittest/customersgetcustomerssearchtest/mock_variable_9.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="3c65a194-784f-4aa6-8e74-fbe74297b774" >
				<munit:payload value="#[output application/json --- readUrl('classpath://munittest/customersgetcustomerssearchtest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://munittest/customersgetcustomerssearchtest/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://munittest/customersgetcustomerssearchtest/set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to customers_get-customers-search" doc:id="f9d1a07c-eaef-45c8-bb28-5f6f635d22a2" name="customers_get-customers-search"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert-that doc:name="Assert that" doc:id="9bd655c4-0d31-4d4e-8b31-c70f214934d1" is="#[MunitTools::notNullValue()]" message='#["Pass"]' expression="#[MunitTools::equalTo(200)]"/>
		</munit:validation>
	</munit:test>
	<munit:test name="customers_get-externalids-test" doc:id="eabac64a-c04b-4404-9bdf-8d9898eb0c3f" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock Select Party Roled Id" doc:id="543a8009-ab0b-454f-9781-4d85f30eb8f3" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Select Party Roled Id" attributeName="doc:name" />
					<munit-tools:with-attribute whereValue="mdm-db-config" attributeName="config-ref" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://munittest/customersgetexternalidstest/mock_payload2.dwl')]" mediaType="application/java" encoding="UTF-8" />
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:mock-when doc:name="Mock Select External Ids" doc:id="0bcf9ef7-bb66-48ed-b1b9-459e72707b53" processor="db:select">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="Select External Ids" attributeName="doc:name" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/java --- readUrl('classpath://munittest/customersgetexternalidstest/mock_payload.dwl')]" mediaType="application/java" encoding="UTF-8" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://munittest/customersgetexternalidstest/mock_variable_.dwl')]" />
						<munit-tools:variable key="customerId" value="#[output application/java --- readUrl('classpath://munittest/customersgetexternalidstest/mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit:set-event doc:name="Set Input" doc:id="da620058-d895-4681-acec-f3bf13f53641" >
				<munit:payload value="#[output application/json --- readUrl('classpath://munittest/customersgetexternalidstest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json" />
				<munit:attributes value="#[readUrl('classpath://munittest/customersgetexternalidstest/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://munittest/customersgetexternalidstest/set-event_variable_.dwl')]" />
					<munit:variable key="customerId" value="#[output application/java --- readUrl('classpath://munittest/customersgetexternalidstest/set-event_variable_1.dwl')]" encoding="UTF-8" mediaType="application/java" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to partyroles_get_externalids" doc:id="87fe7373-6b3a-4ad2-9017-6250cab1b011" name="partyroles_get-externalids"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="05439792-8787-467a-9e26-acba1ceadc17" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import munittest::customersgetexternalidstest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
		</munit:validation>
	</munit:test>

</mule>
