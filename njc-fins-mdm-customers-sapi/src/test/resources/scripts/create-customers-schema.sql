/*
 * Creates the schema for the CIM types used by this implementation
 */

CREATE TABLE IF NOT EXISTS CONTACT_POINT_TYPE (
  OPT_IN_PRIORITY INTEGER NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) UNIQUE NOT NULL,
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE CONTACT_POINT_TYPE
ADD PRIMARY KEY (ID);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_ADDRESS (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500),
  IS_USED_FOR_SHIPPING BOOLEAN,
  STATE_PROVINCE_NAME VARCHAR(500),
  ADDRESS_LINE3 VARCHAR(500),
  COUNTRY_NAME VARCHAR(500),
  POSTAL_CODE_TEXT VARCHAR(500),
  GEO_LATITUDE INTEGER,
  ADDRESS_LINE2 VARCHAR(500),
  ADDRESS_LINE4 VARCHAR(500),
  GEO_ACCURACY INTEGER,
  GEO_LONGITUDE INTEGER,
  ADDRESS_LINE1 VARCHAR(500) NOT NULL,
  CITY_NAME VARCHAR(500),
  IS_USED_FOR_BILLING BOOLEAN,
  PRIMARY_FLAG BOOLEAN,
  BEST_TIME_TO_CONTACT_START_TIME TIME,
  PROFILE_LAST_UPDATED_DATE TIME,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  PROFILE_OCCURRENCE_COUNT INTEGER,
  PROFILE_FIRST_CREATED_DATE TIME,
  BEST_TIME_TO_CONTACT_END_TIME TIME,
  FOR_BUSINESS_USE BOOLEAN,
  FOR_PERSONAL_USE BOOLEAN,
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE CONTACT_POINT_ADDRESS
ADD PRIMARY KEY (ID);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_EMAIL (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500),
  EMAIL_LATEST_BOUNCE_REASON_TEXT VARCHAR(500),
  EMAIL_MAIL_BOX VARCHAR(500),
  EMAIL_DOMAIN VARCHAR(500),
  EMAIL_ADDRESS VARCHAR(500) NOT NULL,
  EMAIL_LATEST_BOUNCE_DATE_TIME DATE,
  PRIMARY_FLAG BOOLEAN,
  BEST_TIME_TO_CONTACT_START_TIME TIME,
  PROFILE_LAST_UPDATED_DATE TIME,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  PROFILE_OCCURRENCE_COUNT INTEGER,
  PROFILE_FIRST_CREATED_DATE TIME,
  BEST_TIME_TO_CONTACT_END_TIME TIME,
  FOR_BUSINESS_USE BOOLEAN,
  FOR_PERSONAL_USE BOOLEAN,
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE CONTACT_POINT_EMAIL
ADD PRIMARY KEY (ID);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_PHONE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500),
  EXTENSION_NUMBER VARCHAR(500),
  PHONE_COUNTRY_CODE VARCHAR(500),
  COUNTRY_NAME VARCHAR(500),
  AREA_CODE VARCHAR(500),
  IS_SM_SCAPABLE BOOLEAN,
  SHORT_CODE INTEGER,
  FORMATTED_INTERNATIONAL_PHONE_NUMBER VARCHAR(500),
  PRIMARY_PHONE_TYPE VARCHAR(500),
  IS_FAX_CAPABLE BOOLEAN,
  FORMATTED_E164_PHONE_NUMBER VARCHAR(500),
  FORMATTED_NATIONAL_PHONE_NUMBER VARCHAR(500),
  TELEPHONE_NUMBER VARCHAR(500) NOT NULL,
  PRIMARY_FLAG BOOLEAN,
  BEST_TIME_TO_CONTACT_START_TIME TIME,
  PROFILE_LAST_UPDATED_DATE TIME,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  PROFILE_OCCURRENCE_COUNT INTEGER,
  PROFILE_FIRST_CREATED_DATE TIME,
  BEST_TIME_TO_CONTACT_END_TIME TIME,
  FOR_BUSINESS_USE BOOLEAN,
  FOR_PERSONAL_USE BOOLEAN,
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE CONTACT_POINT_PHONE
ADD PRIMARY KEY (ID);

CREATE TABLE IF NOT EXISTS CONTACT_POINT (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500),
  PRIMARY_FLAG BOOLEAN,
  BEST_TIME_TO_CONTACT_START_TIME TIME,
  PROFILE_LAST_UPDATED_DATE TIME,
  ACTIVE_FROM_DATE DATE NOT NULL,
  ACTIVE_TO_DATE DATE,
  PROFILE_OCCURRENCE_COUNT INTEGER,
  PROFILE_FIRST_CREATED_DATE TIME,
  BEST_TIME_TO_CONTACT_END_TIME TIME,
  FOR_BUSINESS_USE BOOLEAN,
  FOR_PERSONAL_USE BOOLEAN,
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE CONTACT_POINT
ADD PRIMARY KEY (ID);

CREATE TABLE IF NOT EXISTS EXTERNAL_ID (
  ID VARCHAR(36) UNIQUE NOT NULL,
  EXTERNAL_ID VARCHAR(36) NOT NULL,
  EXTERNAL_ID_TYPE VARCHAR(36) NOT NULL,
  STATUS VARCHAR(50) NOT NULL,
  STATUS_LAST_CHANGED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE EXTERNAL_ID
ADD PRIMARY KEY (ID);

CREATE TABLE IF NOT EXISTS EXTERNAL_ID_TYPE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) UNIQUE NOT NULL,
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE EXTERNAL_ID_TYPE
ADD PRIMARY KEY (ID);

CREATE UNIQUE INDEX EXTERNAL_ID_EXTERNAL_ID_TYPE_IDX ON EXTERNAL_ID(EXTERNAL_ID,EXTERNAL_ID_TYPE);

CREATE TABLE IF NOT EXISTS HOUSEHOLD (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  HOUSEHOLD_MEMBER_COUNT INTEGER,
  HOUSEHOLD_FORMED_DATE DATE,
  HOUSEHOLD_DISSOLVED_DATE DATE,
  PARTY_TYPE VARCHAR(500) NOT NULL,
  GLOBAL_PARTY VARCHAR(500),
  NO_MERGE_REASON VARCHAR(500),
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE HOUSEHOLD
ADD PRIMARY KEY (ID);

/** Accelerators: reduced column sizes to work around MySQL rowsize limitation */
CREATE TABLE IF NOT EXISTS INDIVIDUAL (
  HAS_ALCOHOL_ABUSE_HISTORY BOOLEAN,
  HIGHEST_EDUCATION_LEVEL VARCHAR(500),
  PERSON_HEIGHT INTEGER,
  MAILING_NAME VARCHAR(500),
  SURGERIES_LAST5_YEARS_COUNT INTEGER,
  DO_NOT_TRACK_UPDATE_DATE DATE,
  WEDDING_ANNIVERSARY_DATE DATE,
  MINOR_CITATION_COUNT INTEGER,
  MAIN_DIETARY_HABIT_TYPE VARCHAR(50),
  PERSON_HEIGHT_UNIT_OF_MEASURE VARCHAR(50),
  FIRST_NAME VARCHAR(500),
  PERSON_NAME VARCHAR(500) NOT NULL,
  PHOTO_URL VARCHAR(500),
  IS_HIGH_RISK_HOBBY BOOLEAN,
  DO_NOT_PROCESS_FROM_UPDATE_DATE DATE,
  MILITARY_SERVICE VARCHAR(50),
  MARITAL_STATUS VARCHAR(50),
  DO_NOT_MARKET_FROM_UPDATE_DATE DATE,
  SHOULD_FORGET BOOLEAN,
  ID VARCHAR(36) UNIQUE NOT NULL,
  MAIN_DISABILITY_TYPE VARCHAR(50),
  CONSUMER_CREDIT_SCORE_PROVIDER_NAME VARCHAR(500),
  IS_TOBACCO_CONSUME BOOLEAN,
  WEB_SITE_URL VARCHAR(500),
  SECOND_LAST_NAME VARCHAR(500),
  ORDERING_NAME VARCHAR(500),
  HOSPITALIZATIONS_LAST5_YEARS_COUNT INTEGER,
  DEPENDENT_COUNT INTEGER,
  CONVICTIONS_COUNT INTEGER,
  IS_GOOD_DRIVER BOOLEAN,
  PRIMARY_HOBBY VARCHAR(50),
  MAIN_PERSONAL_VALUE_TYPE VARCHAR(50),
  IS_ALCOHOL_CONSUMER BOOLEAN,
  TAX_BRACKET_RANGE VARCHAR(500),
  CHILDREN_COUNT INTEGER,
  IS_GOOD_STUDENT BOOLEAN,
  MAIN_LIFE_ATTITUDE_TYPE VARCHAR(50),
  NET_WORTH INTEGER,
  PERSON_WEIGHT INTEGER,
  BIRTH_DATE DATE,
  RELIGION VARCHAR(50),
  SEND_INDIVIDUAL_DATA BOOLEAN,
  DEATH_DATE DATE,
  DO_EXTRACT_MY_DATA_UPDATE_DATE DATE,
  BIRTH_PLACE VARCHAR(500),
  OVER_AGE_NUMBER INTEGER,
  DO_FORGET_ME_FROM_UPDATE_DATE DATE,
  PERSON_WEIGHT_UNIT_OF_MEASURE VARCHAR(50),
  MAIN_LIFE_STYLE_TYPE VARCHAR(50),
  GENDER VARCHAR(50),
  HAS_DRUG_ABUSE_HISTORY BOOLEAN,
  SALUTATION VARCHAR(50),
  MOTHERS_MAIDEN_NAME VARCHAR(500),
  DO_NOT_TRACK_LOCATION_UPDATE_DATE DATE,
  ETHNICITY VARCHAR(500),
  MAIN_PERSONALITY_TYPE VARCHAR(50),
  EMPLOYED_SINCE_DATE DATE,
  OFFICIAL_NAME VARCHAR(500),
  IS_HIGH_RISK_OCCUPATION BOOLEAN,
  RESIDENCE_CAPTURE_METHOD VARCHAR(50),
  DO_NOT_PROFILE_FROM_UPDATE_DATE DATE,
  NAME_SUFFIX VARCHAR(50),
  IS_DRUG_CONSUMER BOOLEAN,
  IS_HOME_OWNER BOOLEAN,
  DO_NOT_PROCESS_REASON VARCHAR(500),
  OCCUPATION_TYPE VARCHAR(50),
  DEATH_PLACE VARCHAR(500),
  INFLUENCER_RATING INTEGER,
  MILITARY_STATUS VARCHAR(50),
  CONSUMER_CREDIT_SCORE INTEGER,
  YEARLY_INCOME INTEGER,
  PREFERRED_NAME VARCHAR(500),
  PERSON_LIFE_STAGE VARCHAR(50),
  YEARLY_INCOME_RANGE VARCHAR(50),
  MAJOR_CITATION_COUNT INTEGER,
  MIDDLE_NAME VARCHAR(500),
  RESIDENCE_COUNTRY_NAME VARCHAR(500),
  LAST_NAME VARCHAR(500),
  OCCUPATION VARCHAR(500),
  CURRENT_EMPLOYER_NAME VARCHAR(50),
  PARTY_TYPE VARCHAR(50) NOT NULL,
  GLOBAL_PARTY VARCHAR(500),
  NO_MERGE_REASON VARCHAR(500),
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE INDIVIDUAL
ADD PRIMARY KEY (ID);

/** Accelerators: added table */
CREATE TABLE IF NOT EXISTS ORGANIZATION (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) NOT NULL,
  LEGAL_NAME VARCHAR(500),
  PARTY_TYPE VARCHAR(500) NOT NULL,
  GLOBAL_PARTY VARCHAR(500),
  NO_MERGE_REASON VARCHAR(500),
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE ORGANIZATION
ADD PRIMARY KEY (ID);

CREATE TABLE IF NOT EXISTS PARTY_RELATED_PARTY (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PARTY_ID varchar(36) NOT NULL,
  PARTY_RELATED_PARTY_ID varchar(36) NOT NULL,
  PARTY_RELATIONSHIP_TYPE VARCHAR(36) NOT NULL,
  RELATED_FROM_DATE DATE NOT NULL,
  RELATED_TO_DATE DATE NULL,
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE PARTY_RELATED_PARTY
ADD PRIMARY KEY (ID);

CREATE TABLE IF NOT EXISTS PARTY_RELATIONSHIP_TYPE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  NAME VARCHAR(500) UNIQUE NOT NULL,
  IS_BIDIRECTIONAL BOOLEAN NULL,
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE PARTY_RELATIONSHIP_TYPE
ADD PRIMARY KEY (ID);

CREATE TABLE IF NOT EXISTS PARTY (
  PARTY_TYPE VARCHAR(500) NOT NULL,
  ID VARCHAR(36) UNIQUE NOT NULL,
  GLOBAL_PARTY VARCHAR(500),
  NO_MERGE_REASON VARCHAR(500),
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE PARTY
ADD PRIMARY KEY (ID);

CREATE TABLE IF NOT EXISTS CUSTOMER (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PARTY_ROLE_TYPE VARCHAR(500) NOT NULL,
  CUSTOMER_STATUS VARCHAR(500) NOT NULL,
  PROSPECT_RATING VARCHAR(500),
  NET_PROMOTER_SCORE INTEGER,
  CUSTOMER_SATISFACTION_SCORE INTEGER,
  MARKETING_EMAIL_RESPONSE_RATE INTEGER,
  TOTAL_CONTRACTED_AMOUNT INTEGER,
  TOTAL_PROFIT_CONTRIBUTION_AMOUNT INTEGER,
  CUSTOMER_NUMBER VARCHAR(500),
  CHURN_SCORE INTEGER,
  ORIGINATING_CUSTOMER_SOURCE VARCHAR(500),
  TOTAL_LIFE_TIME_VALUE INTEGER,
  TOTAL_BOOKINGS_AMOUNT INTEGER,
  LAST24_MONTHS_NEW_REVENUE_AMOUNT INTEGER,
  LAST12_MONTHS_NEW_REVENUE_AMOUNT INTEGER,
  LAST12_MONTHS_SUPPORT_CALL_COUNT INTEGER,
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE CUSTOMER
ADD PRIMARY KEY (ID);

CREATE TABLE IF NOT EXISTS PARTY_ROLE (
  ID VARCHAR(36) UNIQUE NOT NULL,
  PARTY_ROLE_TYPE VARCHAR(500) NOT NULL,
  CREATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  CREATED_BY VARCHAR(500) NOT NULL,
  UPDATED_DATE DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  UPDATED_BY VARCHAR(500) NOT NULL
);
ALTER TABLE PARTY_ROLE
ADD PRIMARY KEY (ID);

/** Create join tables for entity relationships */

CREATE TABLE IF NOT EXISTS CONTACT_POINT_ADDRESS_PARTY_JOIN (
  CONTACT_POINT_ADDRESS_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE UNIQUE INDEX CONTACT_POINT_ADDRESS_PARTY_IDX ON CONTACT_POINT_ADDRESS_PARTY_JOIN(CONTACT_POINT_ADDRESS_ID,PARTY_ID);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_ADDRESS_CONTACT_POINT_TYPE_JOIN (
  CONTACT_POINT_ADDRESS_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_ADDRESS_ID) REFERENCES CONTACT_POINT_ADDRESS(ID),
  FOREIGN KEY(CONTACT_POINT_TYPE_ID) REFERENCES CONTACT_POINT_TYPE(ID)
);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_EMAIL_PARTY_JOIN (
  CONTACT_POINT_EMAIL_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_EMAIL_ID) REFERENCES CONTACT_POINT_EMAIL(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE UNIQUE INDEX CONTACT_POINT_EMAIL_PARTY_IDX ON CONTACT_POINT_EMAIL_PARTY_JOIN(CONTACT_POINT_EMAIL_ID,PARTY_ID);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_EMAIL_CONTACT_POINT_TYPE_JOIN (
  CONTACT_POINT_EMAIL_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_EMAIL_ID) REFERENCES CONTACT_POINT_EMAIL(ID),
  FOREIGN KEY(CONTACT_POINT_TYPE_ID) REFERENCES CONTACT_POINT_TYPE(ID)
);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_PHONE_PARTY_JOIN (
  CONTACT_POINT_PHONE_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE UNIQUE INDEX CONTACT_POINT_PHONE_PARTY_IDX ON CONTACT_POINT_PHONE_PARTY_JOIN(CONTACT_POINT_PHONE_ID,PARTY_ID);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_PHONE_CONTACT_POINT_TYPE_JOIN (
  CONTACT_POINT_PHONE_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_PHONE_ID) REFERENCES CONTACT_POINT_PHONE(ID),
  FOREIGN KEY(CONTACT_POINT_TYPE_ID) REFERENCES CONTACT_POINT_TYPE(ID)
);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_PARTY_JOIN (
  CONTACT_POINT_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_ID) REFERENCES CONTACT_POINT(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE IF NOT EXISTS CONTACT_POINT_CONTACT_POINT_TYPE_JOIN (
  CONTACT_POINT_ID  VARCHAR(36) NOT NULL,
  CONTACT_POINT_TYPE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CONTACT_POINT_ID) REFERENCES CONTACT_POINT(ID),
  FOREIGN KEY(CONTACT_POINT_TYPE_ID) REFERENCES CONTACT_POINT_TYPE(ID)
);

CREATE TABLE IF NOT EXISTS CUSTOMER_PARTY_JOIN (
  CUSTOMER_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE IF NOT EXISTS EXTERNAL_ID_CONTACT_POINT_JOIN (
  EXTERNAL_ID VARCHAR(36) NOT NULL,
  CONTACT_POINT_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(EXTERNAL_ID) REFERENCES EXTERNAL_ID(ID),
  FOREIGN KEY(CONTACT_POINT_ID) REFERENCES CONTACT_POINT(ID)
);

CREATE UNIQUE INDEX EXTERNAL_ID_CONTACT_POINT_IDX ON EXTERNAL_ID_CONTACT_POINT_JOIN(EXTERNAL_ID,CONTACT_POINT_ID);

CREATE TABLE IF NOT EXISTS EXTERNAL_ID_EXTERNAL_ID_TYPE_JOIN (
  EXTERNAL_ID VARCHAR(36) NOT NULL,
  EXTERNAL_ID_TYPE VARCHAR(36) NOT NULL,
  FOREIGN KEY(EXTERNAL_ID) REFERENCES EXTERNAL_ID(ID),
  FOREIGN KEY(EXTERNAL_ID_TYPE) REFERENCES EXTERNAL_ID_TYPE(ID)
);

CREATE TABLE IF NOT EXISTS EXTERNAL_ID_PARTY_JOIN (
  EXTERNAL_ID VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(EXTERNAL_ID) REFERENCES EXTERNAL_ID(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE UNIQUE INDEX EXTERNAL_ID_PARTY_IDX ON EXTERNAL_ID_PARTY_JOIN(EXTERNAL_ID,PARTY_ID);

CREATE TABLE IF NOT EXISTS EXTERNAL_ID_PARTY_ROLE_JOIN (
  EXTERNAL_ID VARCHAR(36) NOT NULL,
  PARTY_ROLE_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(EXTERNAL_ID) REFERENCES EXTERNAL_ID(ID),
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID)
);

CREATE UNIQUE INDEX EXTERNAL_ID_PARTY_ROLE_IDX ON EXTERNAL_ID_PARTY_ROLE_JOIN(EXTERNAL_ID,PARTY_ROLE_ID);

CREATE TABLE IF NOT EXISTS PARTY_RELATED_PARTY_PARTY_JOIN (
  PARTY_RELATED_PARTY_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_RELATED_PARTY_ID) REFERENCES PARTY_RELATED_PARTY(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE IF NOT EXISTS PARTY_RELATED_PARTY_RELATED_PARTY_JOIN (
  PARTY_RELATED_PARTY_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_RELATED_PARTY_ID) REFERENCES PARTY_RELATED_PARTY(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE TABLE IF NOT EXISTS PARTY_ROLE_PARTY_JOIN (
  PARTY_ROLE_ID  VARCHAR(36) NOT NULL,
  PARTY_ID VARCHAR(36) NOT NULL,
  FOREIGN KEY(PARTY_ROLE_ID) REFERENCES PARTY_ROLE(ID),
  FOREIGN KEY(PARTY_ID) REFERENCES PARTY(ID)
);

CREATE UNIQUE INDEX PARTY_ROLE_PARTY_IDX ON PARTY_ROLE_PARTY_JOIN(PARTY_ID,PARTY_ROLE_ID);
